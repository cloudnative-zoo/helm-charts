# ----------------------------------------
# Namespace
# ----------------------------------------
namespace:
  name: my-namespace
  labels: { }
  annotations: { }

# ----------------------------------------
# ConfigMap
# ----------------------------------------
configMap:
  enabled: true
  labels: { }
  annotations: { }
  data:
    LOG_LEVEL: "info"

# ----------------------------------------
# ExternalSecret (External Secrets Operator)
# ----------------------------------------
externalSecrets:
  enabled: true
  labels: { }
  annotations: { }
  refreshInterval: "1h"
  storeRef:
    name: my-secret-store
    kind: ClusterSecretStore
  data:
    - secretKey: API_KEY
      remoteRef:
        key: "vault/CREDENTIALS/API_KEY"

# ----------------------------------------
# Deployment
# ----------------------------------------
deployment:
  replicas: 1
  labels: { }
  annotations: { }
  strategy: { }          # e.g. { type: Recreate }
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  pod:
    labels: { }
    annotations: { }
    securityContext: { }
    imagePullSecrets: [ ]
    serviceAccountName: ""
    restartPolicy: Always
    dnsPolicy: ClusterFirst
    hostNetwork: false
    shareProcessNamespace: false

    initContainers: [ ]
    # example:
    # initContainers:
    #   - name: setup
    #     image: busybox
    #     command: ["sh","-c","echo hello"]

    containers:
      main:
        image:
          repository: nginx
          tag: stable
          pullPolicy: IfNotPresent
        securityContext: { }
        envFrom: { }
        env: [ ]
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
        livenessProbe: { }
        readinessProbe: { }
        resources: { }
        volumeMounts: [ ]
      sidecars: [ ]
    volumes: [ ]
    nodeSelector: { }
    affinity: { }
    tolerations: [ ]

# ----------------------------------------
# Service
# ----------------------------------------
service:
  type: ClusterIP
  port: 80
  targetPort: http
  labels: { }
  annotations: { }

# ----------------------------------------
# Istio VirtualService
# ----------------------------------------
virtualService:
  enabled: true
  labels: { }
  annotations: { }
  hosts:
    - myapp.example.com
  gateways:
    - istio-system/my-gateway
  http:
    - match:
        uri:
          prefix: /
      route:
        - destination:
            host: "{{ include \"onechart.fullname\" . }}"
            port:
              number: 80
      timeout: 30s
# ----------------------------------------
# HorizontalPodAutoscaler
# ----------------------------------------
hpa:
  enabled: false
  # HPA metadata
  labels: { }
  annotations: { }
  # Required fields
  minReplicas: 1
  maxReplicas: 10
  # If you leave metrics empty, we'll fall back to CPU Utilization
  targetCPUUtilizationPercentage: 80
  # Or you can supply a full metrics list:
  metrics: [ ]

# ----------------------------------------
# ServiceAccount
# ----------------------------------------
serviceAccount:
  # Create a ServiceAccount resource?
  create: true
  # If you set create: false, Helm will use this name
  name: ""
  # Optional metadata on the SA
  labels: { }
  annotations: { }

# ----------------------------------------
# Status Page (Uptime gatus) twinproduction/gatus
# ----------------------------------------
statuspage:
  enabled: true

  # List all HTTP endpoints you want monitored under “statuspage.endpoints”
  # (each item here will be turned into one “- name:/group:/url:/…” block
  #  inside config.yaml → endpoints:)
  endpoints:
    - name: demo
      group: prod-api
      url: "https://example.com/health"
      interval: 60s
      dns-resolver: tcp://1.1.1.1:53
      conditions:
        - "[STATUS] == 200"
        - "[BODY].health == green"
        - "[RESPONSE_TIME] < 500"
      alerts:
        - type: slack
          failure-threshold: 2
          description: "https://example.com is down"
          send-on-resolved: true
