namespace: example-namespace
istio:
  enabled: false # Set to true if you want to use Istio service mesh sidecar injection.
# Default values for onechart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1
# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: registry.example.com/example/prod-api
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: docker-cfg
# This is to override the chart name.
nameOverride: "prod-api"
fullnameOverride: ""
# Optional deployment strategy.
# If not set, Kubernetes will use its default (RollingUpdate).
# strategy:
#   type: Recreate
#   rollingUpdate:
#     maxUnavailable: 1
#     maxSurge: 1

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: { }
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: { }
podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# New: arbitrary env vars (can be names, values,
# valueFrom, whatever Kubernetes supports)
env: []
# e.g.
# env:
#   - name: TZ
#     value: Europe/Stockholm
#   - name: MY_SECRET
#     valueFrom:
#       secretKeyRef:
#         name: some-secret
#         key: password

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080
  name: prod-api

# Istio VirtualService parameters
virtualService:
  enabled: true
  annotations:
    external-dns.alpha.kubernetes.io/ttl: "60"
    link.argocd.argoproj.io/external-link: "https://example.com"
  hosts:
    - example.com
  gateways:
    - istio-ingress/istio-ingressgateway
  http:
    - match:
        uri:
          prefix: "/"
          ignoreUriCase: true
      route:
        destination:
          # we'll template in the namespace below
          host: prod-api
          port: 8080
      timeout: 60s
      retries:
        attempts: 3
        perTryTimeout: 2s
resources: { }
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 60
readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 60
# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
# Additional volumes on the output Deployment definition.
volumes: [ ]
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: [ ]
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: { }
tolerations: [ ]
affinity: { }
# --- ConfigMap settings ---
configMap:
  enabled: true
  data:
    LOG_LEVEL: info
externalSecrets:
  enabled: true
  refreshInterval: "60m"
  storeRef:
    name: cluster-secret-store-onepassword
    kind: ClusterSecretStore
  data:
    - secretKey: API_KEY
      remoteRef:
        key: "vault/CREDENTIALS/API_KEY"


statuspage:
  enabled: true

  # List all HTTP endpoints you want monitored under “statuspage.endpoints”
  # (each item here will be turned into one “- name:/group:/url:/…” block
  #  inside config.yaml → endpoints:)
  endpoints:
    - name: demo
      group: prod-api
      url: "https://example.com/health"
      interval: 60s
      dns-resolver: tcp://1.1.1.1:53
      conditions:
        - "[STATUS] == 200"
        - "[BODY].health == green"
        - "[RESPONSE_TIME] < 500"
      alerts:
        - type: slack
          failure-threshold: 2
          description: "https://example.com is down"
          send-on-resolved: true
